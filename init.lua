--[[
    BetterConsole Initialization Module

    Docs were generated by copilot. I reviewed them and they look fine, but 
    please take note of that.

    This is the main entry point for the BetterConsole addon. It handles:
    - Module initialization and setup
    - Intercepting Minion's native console visibility system
    - Managing console visibility state
    - Integrating with Minion's event system
    - Providing public API for console operations

    Architecture:
    - Intercepts GUI.ShowConsole to control BetterConsole visibility
    - Synchronizes with ml_gui.showconsole flag
    - Optionally shows/hides the original Minion console
    - Registers event handlers for Module.Initialize and Gameloop.Draw

    Integration Points:
    - RegisterEventHandler for "Module.Initalize" and "Gameloop.Draw"
    - GUI.ShowConsole intercept for visibility control
    - ml_gui.showconsole synchronization
    - BetterConsole global namespace exposure

    Public API:
    - M.set_visible(visible, options): Set console visibility
    - M.is_visible(): Check if console is visible
    - M.set_show_original_console(show): Toggle original console
    - M.get_show_original_console(): Check original console setting
    - M.initialize(): Initialize console and intercepts
    - M.onDraw(): Per-frame rendering handler
    - M.addEntry(level, category, message, data): Add log entry
    - M.clearEntries(): Clear all log entries
    - M.getStats(): Get console statistics
]]

-- Module dependencies
local Strx = BetterConsole.Strx
local Intercept = BetterConsole.Intercept
local App = BetterConsole.App
local Private = BetterConsole.Private

-- Initialize show_original_console flag (controls whether native console is shown)
if BetterConsole.show_original_console == nil then
    BetterConsole.show_original_console = false
end

-- Preserve existing Init module if reloading
local previous_init = BetterConsole.Init
local M = previous_init or {}

-- Create or preserve console instance
M.console = M.console or App.new()
if M.console.is_visible == nil then
    M.console.is_visible = false
end

-- State tracking for console intercept
M.original_show_console = M.original_show_console or nil
M.console_intercept_installed = M.console_intercept_installed or false

-- ============================================================================
-- Private Helper Functions
-- ============================================================================

--- Gets the GUI global table safely
-- @return table|nil The GUI table if available
local function get_gui()
    return rawget(_G, "GUI")
end

--- Gets the current state of the ml_gui.showconsole flag
-- This flag is used by Minion to track console visibility
-- @return boolean The showconsole flag value, or false if unavailable
local function get_showconsole_flag()
    local ml = rawget(_G, "ml_gui")
    if ml and type(ml.showconsole) == "boolean" then
        return ml.showconsole
    end
    return false
end

--- Applies a visibility request to the console
-- Updates both console state and ml_gui.showconsole flag
-- @param requested boolean|nil Desired visibility (nil to toggle)
-- @return boolean The actual visibility state after applying request
local function apply_visibility_request(requested)
    if not M.console then
        return false
    end

    local desired = requested
    if requested == nil then
        desired = not M.console.is_visible
    else
        desired = requested and true or false
    end

    M.console.is_visible = desired

    local ml = rawget(_G, "ml_gui")
    if ml then
        ml.showconsole = desired
    end

    return desired
end

--- Calls the original ShowConsole function if available
-- Used to control the native Minion console when show_original_console is enabled
-- @param argument boolean Visibility argument for original console
-- @param gui_override table|nil Optional GUI table to use instead of global
local function call_original_show_console(argument, gui_override)
    if not M.original_show_console then
        return
    end

    local gui = gui_override or get_gui()
    if gui then
        pcall(M.original_show_console, gui, argument)
    else
        pcall(M.original_show_console, argument)
    end
end

-- ============================================================================
-- Public API Functions
-- ============================================================================

--- Sets the visibility of the BetterConsole window
-- @param visible boolean|nil Desired visibility state (nil to toggle)
-- @param options table|nil Optional parameters:
--   - skip_original_call: Skip calling original ShowConsole
--   - gui: Override GUI table for original console call
-- @return boolean The actual visibility state after change
function M.set_visible(visible, options)
    local desired = apply_visibility_request(visible)
    options = options or {}

    if BetterConsole.show_original_console and not options.skip_original_call then
        call_original_show_console(desired, options.gui)
    end

    return desired
end

--- Checks if the BetterConsole window is currently visible
-- @return boolean True if console is visible
function M.is_visible()
    return M.console and M.console.is_visible or false
end

--- Sets whether the original Minion console should be shown
-- When enabled, both BetterConsole and the original console are visible
-- @param show boolean Whether to show the original console
-- @return boolean The actual show_original_console state
function M.set_show_original_console(show)
    BetterConsole.show_original_console = show and true or false

    if M.original_show_console then
        call_original_show_console(BetterConsole.show_original_console and M.is_visible() or false)
    end

    return BetterConsole.show_original_console
end

--- Gets whether the original Minion console is set to be shown
-- @return boolean True if original console should be shown
function M.get_show_original_console()
    return BetterConsole.show_original_console == true
end

-- Aliases for compatibility (camelCase versions)
M.setVisible = M.set_visible
M.isVisible = M.is_visible
M.setShowOriginalConsole = M.set_show_original_console
M.getShowOriginalConsole = M.get_show_original_console

-- ============================================================================
-- Console Intercept System
-- ============================================================================

--- Intercepted version of GUI.ShowConsole
-- Redirects console visibility requests to BetterConsole
-- @param arg1 table|boolean Either GUI table or visibility boolean
-- @param arg2 boolean|nil Visibility boolean if arg1 is GUI table
-- @return boolean The actual visibility state after change
local function intercepted_show_console(arg1, arg2)
    local requested = arg1
    local gui_table = nil

    if type(arg1) == "table" then
        gui_table = arg1
        requested = arg2
    else
        gui_table = get_gui()
    end

    local desired = M.set_visible(requested, { skip_original_call = true })

    if BetterConsole.show_original_console and M.original_show_console then
        call_original_show_console(desired, gui_table)
    end

    return desired
end

--- Installs the console intercept by replacing GUI.ShowConsole
-- Saves the original ShowConsole function for later use
-- Only installs once; subsequent calls are no-ops
local function install_console_intercept()
    local gui = get_gui()
    if not gui then
        return
    end

    if gui.ShowConsole == intercepted_show_console then
        M.console_intercept_installed = true
        return
    end

    if not M.original_show_console then
        M.original_show_console = gui.ShowConsole
    end

    gui.ShowConsole = intercepted_show_console
    M.console_intercept_installed = true
end

--- Ensures the console environment is properly set up
-- Creates required folders and exposes BetterConsole globally
local function ensure_console_environment()
    if Private and type(Private.ensure_folder) == "function" then
        Private.ensure_folder("logs")
    end

    if _G.BetterConsole ~= BetterConsole then
        _G.BetterConsole = BetterConsole
    end
end

-- ============================================================================
-- Main Lifecycle Functions
-- ============================================================================

--- Initializes the BetterConsole system
-- Clears caches, marks state as dirty, and starts log interception
function M.initialize()
    Strx.clear_category_cache()

    if M.console then
        M.console.state_manager:mark_categories_dirty()
    end

    Intercept.initialize(M.console)

    if M.console and M.console.add_entry then
        M.console:add_entry("INFO", "Console", "BetterConsole initialized - capturing all log messages")
    end
end

--- Per-frame rendering handler
-- Synchronizes visibility with ml_gui.showconsole and renders the console
-- Called every frame by the Gameloop.Draw event handler
function M.onDraw()
    if not M.console then
        return
    end

    local target_visible = get_showconsole_flag()
    if target_visible ~= M.console.is_visible then
        M.set_visible(target_visible, { skip_original_call = true })
    end

    if M.console.is_visible then
        M.console:render()
    end
end

-- ============================================================================
-- Public Console Operations
-- ============================================================================

--- Adds a log entry to the console
-- @param level string Log level (DEBUG, INFO, WARN, ERROR, etc.)
-- @param category string Category/source of the log entry
-- @param message string Log message text
-- @param data any|nil Optional additional data for the entry
function M.addEntry(level, category, message, data)
    if M.console then
        M.console:add_entry(level, category, message, data)
    end
end

--- Clears all log entries from the console
function M.clearEntries()
    if M.console then
        M.console:clear_entries()
    end
end

--- Gets console statistics (entry counts, performance metrics, etc.)
-- @return table Statistics table with various metrics
function M.getStats()
    if M.console then
        return M.console:get_stats()
    end
    return {}
end

-- Export the Init module
BetterConsole.Init = M

-- ============================================================================
-- Event Handlers Module
-- ============================================================================

--- Module container for event handler functions
-- Keeps event handlers organized and prevents global namespace pollution
local betterconsole_module = {}

--- Module initialization event handler
-- Sets up the environment, installs intercepts, and initializes the console
-- Called once when the module is first loaded by Minion
function betterconsole_module.ModuleInit()
    ensure_console_environment()
    install_console_intercept()
    local initial_visible = get_showconsole_flag()
    M.set_visible(initial_visible, { skip_original_call = true })
    M.set_show_original_console(BetterConsole.show_original_console)

    if M.initialize then
        M.initialize()
    end
end

--- Per-frame draw event handler
-- Ensures intercept is installed and calls the main draw function
-- Called every frame by Minion's Gameloop.Draw event
function betterconsole_module.OnDrawHandler()
    if not M.console_intercept_installed then
        install_console_intercept()
    end

    if M.onDraw then
        M.onDraw()
    end
end

-- ============================================================================
-- Event Registration
-- ============================================================================

--- Register the module initialization handler
-- Called once when the LuaMod is loaded by Minion
-- Note: Event name has typo "Initalize" instead of "Initialize" (Minion's spelling)
RegisterEventHandler("Module.Initalize", betterconsole_module.ModuleInit, "BetterConsole.Init")

--- Register the per-frame draw handler
-- Called every frame to render the console UI
RegisterEventHandler("Gameloop.Draw", betterconsole_module.OnDrawHandler, "BetterConsole.Draw")
